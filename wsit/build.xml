<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="WSIT" default="main" basedir=".">
    <description>Builds, tests, and runs the project WSIT.</description>
    <import file="nbproject/build-impl.xml"/>
    <import file="properties.xml"/>

    <taskdef name="installerBuilder"
        classname="com.sun.tools.xjc.installer.builder.BuilderTask">
        <classpath>
            <fileset dir="${etc.lib.dir}" includes="installer-builder.jar, sfx4j-1.0.jar"/>
        </classpath>
    </taskdef>

    <target name="-do-jar-without-manifest" depends="image">
        <mkdir dir="${dist.dir}"/>
        <zip basedir="${dist.image.dir}" destfile="${dist.dir}/${install.name}.zip"/>
        <installerBuilder classFile="${dist.dir}/${install.name}-installer.jar" licenseFile="CDDLv1.0.1.txt" zipFile="${dist.dir}/${install.name}.zip"/>
    </target>
    
    <target name="installer">
        <installerBuilder classFile="${dist.dir}/${install.name}-installer.jar" licenseFile="CDDLv1.0.1.txt" zipFile="${dist.dir}/${install.name}.zip"/>
    </target>

    <target name="dist" depends="jar"/>

    <target name="main" depends="dist"
        description="Create the wsit tool and runtime jars and installers."/>
    
    <target name="image" description="Create the wsit tool and runtime jars.">
        <copy todir="${dist.image.wsit.dir}">
            <fileset dir="${basedir}" includes="CDDL*.*"/>
            <fileset dir="${etc.dir}" includes="wsit-on-*.*"/>
        </copy>
        <generate-release-notes target="${dist.image.wsit.dir}/docs"/>
        <!-- generate samples -->
        <unzip src="lib/jaxws-samples.zip" dest="${dist.image.wsit.dir}/samples" />
        <replace dir="${dist.image.wsit.dir}/samples">
            <replacefilter token="env.JAXWS_HOME" value="env.METRO_HOME" />
        </replace>
        <!-- copy over shell scripts -->
        <unzip src="lib/jaxws-bin.zip" dest="${dist.image.wsit.dir}/bin" />
        <replace dir="${dist.image.wsit.dir}/bin">
            <replacefilter token="JAXWS_HOME" value="METRO_HOME" />
            <replacefilter token="jaxws-tools.jar" value="webservices-tools.jar" />
        </replace>
    </target>

    <target name="-javadoc-build" depends="init"/>
    
    <target name="src-zip">
        <ant dir="${rt.dir}" target="src-zip"/>
        <ant dir="${tools.dir}" target="src-zip"/>
    </target>
    
    <macrodef name="integrate-jaxws">
        
        <attribute name="jaxws.base.url"/>
        
        <sequential>
            
            <!-- JAX-WS 2.1 JARs -->

            <!-- Unzip the JARs -->
            <delete dir="${tmpdir}"/>
            <mkdir dir="${tmpdir}"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/build/jaxws-ri.zip"
                    dest="${tmpdir}/jaxws-ri.zip"/>
            <unzip src="${tmpdir}/jaxws-ri.zip" dest="${tmpdir}"/>

            <!-- unzip the JAR source zips -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/build/jaxws-libs.src.zip"
                    dest="${tmpdir}/jaxws-libs.src.zip"/>
            <unzip src="${tmpdir}/jaxws-libs.src.zip" dest="${tmpdir}"/>

            <!-- copy to relevant directories -->
            <copy todir="${lib.runtime.dir}" overwrite="true" verbose="${verbose}">
                <fileset dir="${tmpdir}/jaxws-ri/lib" includes="*.jar" excludes="jaxb-xjc.*, *-tools.*"/>
                <fileset dir="${tmpdir}" includes="*.zip" excludes="jaxb-xjc.*, *-tools.*"/>
            </copy>
            <copy todir="${lib.tooltime.dir}" overwrite="true" verbose="${verbose}">
                <fileset dir="${tmpdir}/jaxws-ri/lib" includes="jaxb-xjc.*, *-tools.*"/>
                <fileset dir="${tmpdir}" includes="jaxb-xjc.*, *-tools.*"/>
            </copy>
            <zip file="lib/jaxws-samples.zip">
              <fileset dir="${tmpdir}/jaxws-ri/samples" />
            </zip>
          <zip file="lib/jaxws-bin.zip">
            <fileset dir="${tmpdir}/jaxws-ri/bin" />
          </zip>

            <!-- retrieve the JAX-WS source zips -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/dist/jaxws-ri/lib/jaxws-rt.src.zip"
                    dest="${lib.runtime.dir}/jaxws-rt.src.zip"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/dist/jaxws-ri/lib/jaxws-tools.src.zip"
                    dest="${lib.tooltime.dir}/jaxws-tools.src.zip"/>

            <!-- Local transport JAR and Source -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport.jar"
                    dest="${lib.runtime.dir}/jaxws-local-transport.jar"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport-src.zip"
                    dest="${lib.runtime.dir}/jaxws-local-transport-src.zip"/>
            
            <!-- release notes source -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/build/release-notes-src.zip"
                    dest="lib/releasenotes/release-notes-src.zip"/>
        </sequential>
        
    </macrodef>

    <target name="integrate-jaxws-hudson"
            description="integrates latest JAX-WS 2.1.3 bits in WSIT, meant for internal consumption only">

        <integrate-jaxws jaxws.base.url="http://kohsuke.sfbay/hudson/view/JAXWS%202.1.3/job/jaxws-ri-2.1.3/lastSuccessfulBuild"/>
        
    </target>

    <target name="integrate-jaxws-bleedingedge-hudson"
            description="integrates latest JAX-WS 2.1.3 bleedingedge bits in WSIT, meant for internal consumption only">
                
        <integrate-jaxws jaxws.base.url="http://kohsuke.sfbay/hudson/job/jaxws-2.1.2-bleedingedge/lastSuccessfulBuild"/>
        
    </target>

    <target name="integrate-xwss30-hudson" 
            description="integrate the last successful XWSS 3.0 Hudson build">
        <!-- get src="http://kohsuke.sfbay/hudson/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/lib/xws-security.src.zip"
         dest="lib/xws-security.src.zip" / -->
        <get src="http://kohsuke.sfbay.sun.com/hudson/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/lib/xws-security.jar"
             dest="lib/runtime/xws-security.jar" />
        <get src="http://kohsuke.sfbay.sun.com/hudson/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/xws-security.src.zip"
             dest="lib/runtime/xws-security.src.zip" />
    </target>
    
    <target name="runtests">
      <ant antfile="run-ql-tests.xml"/>
    </target>

    <target name="create-wsit-runtime-jar">
        <ant dir="${rt.dir}" target="create-wsit-runtime-jar"/>
    </target>
     <target name="create-wsit-tools-jar">
        <ant dir="${tools.dir}" target="create-wsit-tools-jar"/>
    </target>

    <target name="create-wsit-jars" depends="jar,src-zip" >
        <antcall target="create-wsit-runtime-jar"/>
        <antcall target="create-wsit-tools-jar"/>
    </target>

    <target name="create-wsit-integration-zip">
       <antcall target="create-wsit-jars"/>
        <property name="wsit.integration.dir" value="${dist.dir}/wsit-integration"/>
        <mkdir dir="${dist.dir}/wsit-integration"/>

        <copy todir="${wsit.integration.dir}" >
            <fileset dir="${dist.image.wsit.dir}">
                <include name="wstx-services.war"/>
            </fileset>
        </copy>
        <copy todir="${wsit.integration.dir}" >
            <fileset dir="${rt.dir}/build">
                <include name="wsit-*.*"/>
                <include name="*src.zip"/>
            </fileset>
        </copy>
        <copy todir="${wsit.integration.dir}" >
            <fileset dir="${tools.dir}/build/">
                <include name="wsit-*.*"/>
                <include name="*src.zip"/>
            </fileset>
        </copy>
        <copy todir="${wsit.integration.dir}">
            <fileset dir="${lib.runtime.dir}">
                <include name="xws-security.jar"/>
                <include name="trust-jaxbbindings.jar"/>
                <include name="secconv-jaxbbindings.jar"/>
            </fileset>
        </copy>
        <zip destfile="${wsit.integration.dir}/wsit-integration.zip">
                   <fileset dir="${wsit.integration.dir}">
                       <include name="wsit-rt*.*"/>
                       <include name="wsit-tools*.*"/>
                       <include name="xws-security.jar"/>
                       <include name="*src*"/>
                       <include name="trust-jaxbbindings.jar"/>
                       <include name="wstx-*.*"/>
                   </fileset>

         </zip>
    </target>
    
    <target name="-post-compile-test"
            description="Run unit tests of dependent projects">
        <ant dir="${rt.dir}"
             target="test"
             inheritAll="false"/>
    </target>

    <target name="integrate-htmlmacro-hudson"
            description="integrate the last successful htmlmacro Hudson build">
      <get
          src="http://kohsuke.sfbay.sun.com/hudson/job/htmlmacro/lastSuccessfulBuild/artifact/htmlmacro/build/htmlmacro.zip"
          dest="${lib.releasenotes.dir}/htmlmacro.zip"/>
      <mkdir dir="${lib.releasenotes.dir}/htmlmacro"/>
      <unzip src="${lib.releasenotes.dir}/htmlmacro.zip" dest="${lib.releasenotes.dir}/htmlmacro"/>
      <copy todir="${lib.releasenotes.dir}" overwrite="true">
        <fileset dir="${lib.releasenotes.dir}/htmlmacro/" includes="*.zip,*.jar"/>
      </copy>
      <delete dir="${lib.releasenotes.dir}/htmlmacro"/>
      <delete file="${lib.releasenotes.dir}/htmlmacro.zip"/>
    </target>

  <macrodef name="generate-release-notes">
        <attribute name="target" /><!-- where to put the generated docs? -->
        <sequential>
            <mkdir dir="@{target}"/>
            <copy todir="@{target}">
                <fileset dir="docs/releasenotes" includes="style/*, Copyright.txt" />
            </copy>
            <taskdef name="htmlmacro" classname="com.sun.wts.tools.htmlmacro.HtmlMacroTask">
                <classpath>
                  <fileset dir="lib/releasenotes" />
                </classpath>
            </taskdef>
            <mkdir dir="build/release-notes-src"/>
            <unzip src="lib/releasenotes/release-notes-src.zip" dest="build/release-notes-src"/>
            <copy todir="build/release-notes-src" overwrite="true">
              <fileset dir="docs/releasenotes" />
            </copy>
            <htmlmacro destdir="@{target}">
                <documents dir="build/release-notes-src" includes="*.html" />
                <tags dir="docs/releasenotes/tags" includes="**/*.tag" />
                <property key="IMPL_VERSION" value="${release.impl.version}"/>
                <property key="IMPL_VERSION_SUFFIX" value="${release.impl.version.suffix}"/>
                <property key="DATE" value="${DSTAMP}"/>
                <!-- Product name so that we can switch between JAX-WS RI and Metro -->
                <property key="PRODUCT_SHORT_NAME" value="Metro"/>
                <property key="PRODUCT_NAME" value="Metro ${release.impl.version} ${release.impl.version.suffix}"/>
                <!-- Used in various places to refer to installation dir -->
                <property key="HOME" value="METRO_HOME" />
            </htmlmacro>
        </sequential>
    </macrodef>
    
    <target name="test-docs"
            description="Generate documentation. Useful for checking the output during authoring">
        <generate-release-notes target="build/releasenotes"/>
    </target>


    

     <target name="generate-bundle-for-licensee" depends="init,clean">
         <property name="wsit.ws.dir" value="${basedir}"/>
         <property name="source.drop.dir" value="build/source-bundle"/>
         <property name="source.dist.dir.name" value="wsit-sourcebundle-${BUILD_TAG}"/>


         <property name="ws.source.dir" value="${source.drop.dir}"/>
         <echo message="wsit.ws.dir => ${wsit.ws.dir}" />
         <echo message="ws.source.dir => ${ws.source.dir}" />
         <mkdir dir="${ws.source.dir}" />
         <delete dir="${ws.source.dir}" />

         <echo message="Copying wsit sources"/>
         <mkdir dir="${ws.source.dir}/wsit/rt" />

         <copy todir="${ws.source.dir}/wsit" file ="${wsit.ws.dir}/build.xml"/>
         <copy todir="${ws.source.dir}/wsit" file ="${wsit.ws.dir}/properties.xml"/>
         <copy todir="${ws.source.dir}/wsit/rt">
             <fileset dir="${wsit.ws.dir}/rt"/>
         </copy>

         <copy todir="${ws.source.dir}/wsit/tools">
             <fileset dir="${wsit.ws.dir}/tools"/>
         </copy>

         <copy todir="${ws.source.dir}/wsit/lib/">
             <fileset dir="${wsit.ws.dir}/lib"/>
         </copy>

         <copy todir="${ws.source.dir}/wsit/docs">
             <fileset dir="${wsit.ws.dir}/docs"/>
         </copy>


         <copy todir="${ws.source.dir}/wsit">
             <fileset dir="${wsit.ws.dir}">
                 <include name="*.html"/>
                 <include name="*.txt"/>
             </fileset>
         </copy>
         
         <copy todir="${ws.source.dir}/wsit/nbproject">
             <fileset dir="${wsit.ws.dir}/nbproject"/>
         </copy>
         <copy todir="${ws.source.dir}/wsit/etc">
             <fileset dir="${wsit.ws.dir}/etc"/>
         </copy>
         <delete>
             <fileset dir="${wsit.ws.dir}" includes="**/CVS" />
         </delete>


         <zip destfile="${source.drop.dir}/wsit-licensee-bundle.zip"
              basedir="${ws.source.dir}"
                 />
     </target>
   

</project>
