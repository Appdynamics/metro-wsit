   import com.sun.xml.ws.rm.Message;
   try {
       myfilter = new com.sun.xml.ws.rm.jaxws.util.ProcessingFilter(){
             boolean hasDroppedNumber2 = false;
             public boolean handleClientRequestMessage(com.sun.xml.ws.rm.Message mess) {

            //System.out.println(mess);

            //be careful to only drop the message once.  Have to allow
            //the retry to succeed/
            if (!hasDroppedNumber2 && mess.getMessageNumber() == 2) {
                System.out.println("losing message number 2 on Thread " +
                        Thread.currentThread().getId());
                hasDroppedNumber2 = true;
                return false;
            }
            return true;
        }

         public boolean handleClientResponseMessage(Message mess) {
            System.out.println("In handleClientResponse"+mess);
            return true;
        }

        public void handleEndpointRequestMessage(Message mess){}
        public boolean handleEndpointResponseMessage(Message mess){return true;}
        public void handleOutboundHeaders(Message mess){}


            };
 com.sun.xml.ws.rm.jaxws.runtime.client.RMSource.getRMSource().setProcessingFilter(myfilter);
            for (int i = 0; i < 4; i++) {
                System.out.println("sending " + i + " on Thread " +
                        Thread.currentThread().getId());
                WSHttpBinding_IPing.ping("bar " + i);
            }

            //wait here for awhile and see if the Maintenance thread sends
            //heartbeats to keep the sequence alive.
            /*try {
                Thread.sleep(200000);
            } catch (Exception e) {

            }*/

            WSHttpBinding_IPing.close();
            assertTrue(true);
        } catch (Exception e ){
            e.printStackTrace();
            fail("The ReliableOneway.testDroppedMessage failed with the above exception");
        }





