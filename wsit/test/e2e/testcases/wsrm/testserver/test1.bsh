

import com.sun.xml.ws.rm.Message;
import com.sun.xml.ws.rm.jaxws.runtime.client.RMSource;

/* Mask determines whether messages should be dropped.  Message whose index has
     * value 0 is dropped first time.
*/
int[] dropList = {1,1,0,1,0,1,1,0,1};

 

public void close(IPing port) {
    ClientSession session = ClientSession.getSession((BindingProvider)port);
    session.close();
}

myfilter = new com.sun.xml.ws.rm.jaxws.util.ProcessingFilter(){
    public boolean handleClientResponseMessage(Message mess) {
           return true;
    }
    public void handleEndpointRequestMessage(Message mess){}
    public boolean handleEndpointResponseMessage(Message mess){return true;}
    public void handleOutboundHeaders(Message mess){}
    public boolean handleClientRequestMessage(Message mess) {

            int index = mess.getMessageNumber() - 1;
            if (dropList[index] == 0) {
                dropList[index] = 1;
                return false;
            }
            System.out.println("sending " + mess.getMessageNumber());
            return true;
    }
};

RMSource.getRMSource().setProcessingFilter(myfilter);


testDuplicates(){
assertTrue(true);
return;
    service = new wsrm.testserver.client.PingService();
    IPing portSequence = service.getWSHttpBindingIPing();
    IPing portControl = service.getWSHttpBindingIPing();
 
    try {
    int num = dropList.length;

    /* expected result (modulo order) when report operation is called */
    String ret = "";

    portControl.clear(null);

    try {
        Thread.sleep(new Long("1000").longValue());
    } catch (Exception e) {}

    for (int i = 0; i < num; i++) {
        portSequence.process("block");

        //use i+1 because message numbers are one-based and
        ret += Integer.toString(i + 1);
        ret += ",";
    }

    //wait for everything to arrive
    try {
         Thread.sleep(new Long("2000").longValue());
    } catch (Exception e) {}

    String retCount = portControl.getCount(null);
    String retStr = portControl.getSequence(null);
    String retDuplicates = portControl.getDuplicates(null);

    System.out.println("");
    System.out.println("sent messages  = " + ret);
    System.out.println("received messages from endpoint = " + retStr);
    System.out.println("received count from endpoint = " + retCount);

    if (retDuplicates.equals("true")) {
        System.out.println("Duplicates were received at the endpoint.");            
    } else {
        System.out.println("No duplicates were received at the endpoint.");
    }

    assertEquals(retDuplicates,"false");

    if (ret.equals(retStr)) {
        System.out.println("Messages were received in order.");
    } else {
        System.out.println("Messages were received out-of-order.");
    }

    //FIXME
    //assertEquals(ret, retStr);
    } finally {
        portSequence.close();
        portControl.close();
    }
}

testDuplicates();

