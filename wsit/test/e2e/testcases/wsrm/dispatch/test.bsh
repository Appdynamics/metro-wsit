import javax.xml.ws.BindingProvider;

import javax.xml.bind.*;
import javax.xml.namespace.*;
import javax.xml.ws.WebServiceRef;
import javax.xml.ws.Dispatch;
import javax.xml.ws.soap.SOAPBinding;

import javax.xml.soap.SOAPMessage;
import javax.xml.soap.MessageFactory;

import java.io.ByteArrayOutputStream;
import java.io.StringReader;

import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.Source;

import javax.xml.namespace.QName;


import junit.framework.TestCase;

 helloRequest = "<?xml version=\"1.0\" ?>" +
            "<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
            "  <S:Header></S:Header>" +
            "  <S:Body>" +
            "    <echoString xmlns=\"http://tempuri.org/\">" +
            "      <Text>Hello There! no0</Text>" +
            "      <Sequence>seq! no0</Sequence>" +
            "    </echoString>" +
            "  </S:Body>" +
            "</S:Envelope>";

       static PingService service = new PingService();

        
        private final String NAMESPACEURI = "http://tempuri.org/";
        private static final String SERVICE_NAME = "PingService";
        private static final String PORT_NAME = "WSHttpBinding_IPing";
        private QName SERVICE_QNAME = new QName(NAMESPACEURI, SERVICE_NAME);
        private QName PORT_QNAME = new QName(NAMESPACEURI, PORT_NAME);



     public void testSendEcho()  {
        System.out.println("doInvoke");
        // Dispatch<SOAPMessage> dispatchMsg = null;
        List features = new ArrayList();
        features.add(new javax.xml.ws.RespectBindingFeature());
        WebServiceFeature[] wsarray = features.toArray(new WebServiceFeature[0]);
        try {
            //dispatchMsg = service.createDispatch(PORT_QNAME, SOAPMessage.class, javax.xml.ws.Service.Mode.MESSAGE,new WebServiceFeature[] {new javax.xml.ws.RespectBindingFeature()});
            dispatchMsg = service.createDispatch(PORT_QNAME, SOAPMessage.class, javax.xml.ws.Service.Mode.MESSAGE,wsarray);
            SOAPMessage reqMsg = makeSOAPMessage(helloRequest);
            System.out.println("SOAPMessage request: " + getSOAPMessageAsString(reqMsg));
            SOAPMessage resMsg = dispatchMsg.invoke(reqMsg);
            System.out.println("SOAPPMessage response: " + getSOAPMessageAsString(resMsg));
            String responseMessage = getSOAPMessageAsString(resMsg);
            if (!responseMessage.contains(new String("Action"))){
               fail("The response Message is not as expected");
            }

        } catch (Exception e) {
            e.printStackTrace();
           fail("The response Message is not as expected");
        }
    }

    private String getSOAPMessageAsString(SOAPMessage msg)
    {
        ByteArrayOutputStream baos = null;
        String s = null;
        try {
            baos = new ByteArrayOutputStream();
            msg.writeTo(baos);
            s = baos.toString();
        } catch(Exception e) {
            e.printStackTrace();
        }
        return s;
    }

    private SOAPMessage makeSOAPMessage(String msg)
    {
        try {
            MessageFactory factory = MessageFactory.newInstance();
            SOAPMessage message = factory.createMessage();
            message.getSOAPPart().setContent((Source) new StreamSource(new StringReader(msg)));
            message.saveChanges();
            return message;
        }
        catch (Exception e) {
            return null;
        }
    }


testSendEcho();
