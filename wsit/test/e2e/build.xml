<?xml version="1.0"?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License).  You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the license at
 https://glassfish.dev.java.net/public/CDDLv1.0.html.
 See the License for the specific language governing
 permissions and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at https://glassfish.dev.java.net/public/CDDLv1.0.html.
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 you own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 Copyright 2006 Sun Microsystems Inc. All Rights Reserved
-->

<!--
 $Id: build.xml,v 1.27 2007-04-03 06:27:29 hofsass Exp $

 Copyright (c) 2005 Sun Microsystems, Inc.
 All rights reserved.
-->

<project name="wsit.dev.java.net main" default="main" basedir=".">
    <property file="${basedir}/build.properties"/>
    <import file="properties.xml"/>
    
    <path id="harness.classpath">
        <fileset dir="${test.lib.dir}" includes="*.jar"/>
    </path>
    
    <!-- BEGIN: Emma code coverage specific stuff -->        
    <path id="emma.lib" >
        <pathelement location="${emma.dir}/emma.jar" />
        <!-- pathelement location="${emma.dir}/emma_ant.jar" /-->
    </path>
    
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />    
    
    <target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
        <property name="emma.enabled" value="true" />
        
        <path id="instr.override.path">
            <pathelement location="${out.instr.dir}" />
            <path refid="emma.lib" />
        </path>
    </target>   
        
    <!--
    <target name="emma_report" description="just creates a report from metadata files" >
            <emma>
                <report sourcepath="${wsit.dir}/rt/src" >
                    <fileset dir="${coverage.dir}" >
                        <include name="*.emma" />
                    </fileset>
                    
                    <txt outfile="${coverage.dir}/coverage.txt" />
                    <html outfile="${coverage.dir}/coverage.html" />
                </report>
            </emma>                    
    </target>        
    -->
    <!-- END: Emma code coverage specific stuff -->
    
    
    <target name="prepare">
        <mkdir dir="${out.instr.dir}" />        
        <mkdir dir="${logs.dir}/junit-reports" />
        <mkdir dir="${logs.dir}"/>
    </target>
    
    <target name="get-wsit-hudson" description="internal: retrieve last successful build of WSIT from hudson" unless="noget">
        <mkdir dir="wsit-image"/>
        <mkdir dir="wsit-image/runtime"/>
        
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet/lastSuccessfulBuild/artifact/dist/jax-ws-latest-wsit.zip"
             dest="wsit-image/jax-ws-latest-wsit.zip"/>
        <unzip src="wsit-image/jax-ws-latest-wsit.zip" dest="wsit-image"/>
        
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet/lastSuccessfulBuild/artifact/rt/build/webservices-src.zip"
             dest="wsit-image/webservices-src.zip"/>
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet/lastSuccessfulBuild/artifact/tools/build/webservices-tools-src.zip"
             dest="wsit-image/webservices-tools-src.zip"/>
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet/lastSuccessfulBuild/artifact/lib/runtime/jaxws-local-transport.jar"
             dest="wsit-image/runtime/jaxws-local-transport.jar"/>
    </target>
    
    <target name="get-wsit-bleedingedge-hudson" description="internal: retrieve last successful build of WSIT from hudson" unless="noget">
        <mkdir dir="wsit-image"/>
        <mkdir dir="wsit-image/runtime"/>
        
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet-bleedingedge/lastSuccessfulBuild/artifact/dist/jax-ws-latest-wsit.zip"
             dest="wsit-image/jax-ws-latest-wsit.zip"/>
        <unzip src="wsit-image/jax-ws-latest-wsit.zip" dest="wsit-image"/>
        
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet-bleedingedge/lastSuccessfulBuild/artifact/rt/build/webservices-src.zip"
             dest="wsit-image/webservices-src.zip"/>
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet-bleedingedge/lastSuccessfulBuild/artifact/tools/build/webservices-tools-src.zip"
             dest="wsit-image/webservices-tools-src.zip"/>
        <get src="http://kohsuke.sfbay/hudson/job/wsit-javanet-bleedingedge/lastSuccessfulBuild/artifact/lib/runtime/jaxws-local-transport.jar"
             dest="wsit-image/runtime/jaxws-local-transport.jar"/>
    </target>
    
    <target name="integrate-test-harness-hudson" description="integrates latest test harness into WSIT, meant for internal consumption only">
        <mkdir dir="tmp/test-harness"/>
        <get src="http://kohsuke.sfbay/hudson/job/jaxws-test-harness/lastSuccessfulBuild/artifact/build/test-harness.zip"
             dest="tmp/test-harness.zip"/>
        <unzip src="tmp/test-harness.zip" dest="tmp"/>
        <copy todir="${test.lib.dir}" overwrite="true" verbose="${verbose}">
            <fileset dir="tmp/test-harness" includes="*.zip, *.jar"/>
        </copy>
        <copy todir="${test.docs.dir}" overwrite="true" verbose="${verbose}">
            <fileset dir="tmp/test-harness" includes="*.html, *.png"/>
        </copy>
        <delete dir="tmp" includeemptydirs="true"/>
    </target>
    
    <target name="clean">
        <delete dir="build"/>
        <delete dir="${logs.dir}"/>
        <delete dir="${out.instr.dir}"/>
        <delete dir="${coverage.dir}"/>
    </target>
    
    <!-- invokes Unit test-->
    <macrodef name="run-tests">
        <!--
            These are the default args that are passed to the harness which mean that
            the tests will be using the dist image of the wsit workspace , run the tests
            using local transport and recursively scan for all the sub dirs under testcases

            Please modify these options if you wish to test the harness in different
            modes
            For more information on the different command line options
            refer to docs/index.html
        -->
        <element name="arguments" />                        
        <sequential>
            <antcall target="prepare"/>
            
        <!-- BEGIN: Emma code coverage specific stuff -->    
            <emma enabled="${emma.enabled}" >
                <instr 
                    destdir="${out.instr.dir}"	
                    metadatafile="${coverage.dir}/metadata.emma"
                    merge="true"
                >
                    <instrpath>
                        <fileset dir="${wsit.image}/lib" includes="*.jar" />
                    </instrpath>
                    
                    <filter includes="com.sun.xml.ws.addressing.*"/>
                    <filter includes="com.sun.xml.ws.api.tx*"/>
                    <filter includes="com.sun.xml.ws.assembler.*"/>
                    <filter includes="com.sun.xml.ws.encoding.*"/>
                    <filter includes="com.sun.xml.ws.message.*"/>
                    <filter includes="com.sun.xml.ws.mex.*"/>
                    <filter includes="com.sun.xml.ws.policy.*"/>
                    <filter includes="com.sun.xml.ws.rm.*"/>
                    <filter includes="com.sun.xml.ws.runtime.*"/>
                    <filter includes="com.sun.xml.ws.security.*"/>
                    <filter includes="com.sun.xml.ws.transport.*"/>
                    <filter includes="com.sun.xml.ws.tx.*"/>
                    
                    <filter includes="com.sun.xml.wss.jaxws.*"/>
                    <filter includes="com.sun.xml.wss.provider.*"/>
                </instr>
            </emma>            
            <!-- END: Emma code coverage specific stuff -->
            
            <java jar="${test.lib.dir}/harness.jar" fork="true">
                <sysproperty key="WSIT_HOME" value="${basedir}/misc"/>
                <sysproperty key="com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump" value="true"/>
                <sysproperty key="com.sun.xml.ws.transport.local.LocalTransportTube.dump" value="true"/>
                <sysproperty key="com.sun.xml.ws.runtime.client" value="true"/>
                
                
                <arg value="-report" />
                <arg path="${logs.dir}" />
                
                <!-- BEGIN: Emma code coverage specific stuff -->
                <arg value="-cp:override" />
                <arg pathref="instr.override.path" />                
                <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
                <jvmarg value="-Demma.coverage.out.merge=true" />
                <!-- END: Emma code coverage specific stuff -->    

                <arguments />
                <arg line="${args}"/>

                <!--
                <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000" />
		<jvmarg value="-Xdebug"/>
                -->
            </java>
            
            <mkdir dir="${logs.dir}/junit-reports" />
            <junitreport todir="${logs.dir}/junit-reports">
                <fileset dir="${logs.dir}" includes="*.xml" />
                <report format="frames" todir="${logs.dir}/junit-reports"/>
            </junitreport>
            
            <!-- BEGIN: Emma code coverage specific stuff -->            
            <emma enabled="${emma.enabled}" >
                <report sourcepath="${wsit.dir}/rt/src" >
                    <fileset dir="${coverage.dir}" >
                        <include name="*.emma" />
                    </fileset>
                    
                    <txt outfile="${coverage.dir}/coverage.txt" />
                    <html outfile="${coverage.dir}/coverage.html" />
                </report>
            </emma>                        
            <!-- END: Emma code coverage specific stuff -->
            
        </sequential>                 
    </macrodef>
    
    <target name="main-hudson-no-get">
        <property name="noget" value="true"/>
        <antcall target="main-hudson"/>
    </target>
    
    <target name="main-hudson"
            description="Invoke unit test from Hudson. This downloads WSIT from Hudson, as opposed to test the local one"
            depends="get-wsit-hudson">
        
        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="wsit-image/jax-ws-latest-wsit" />
                <arg value="-transport" />
                <arg path="wsit-image/runtime/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>
    
    <target name="main-bleedingedge-hudson"
            description="Invoke unit test from Hudson. This downloads WSIT (wsit-javanet-bleedingedge) from Hudson, as opposed to test the local one"
            depends="get-wsit-bleedingedge-hudson">
        
        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="wsit-image/jax-ws-latest-wsit" />
                <arg value="-transport" />
                <arg path="wsit-image/runtime/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>
    
    <target name="main"
            description="Runs unit test on the entire workspace">
        
        <run-tests>
            <arguments>
                <arg value="-r" />
                <arg path="${testcases}" />
                <arg value="-cp:wsit-image" />
                <arg path="${wsit.image}" />
                <arg value="-transport" />
                <arg path="../../lib/runtime/jaxws-local-transport.jar" />
            </arguments>
        </run-tests>
    </target>
    
</project>
